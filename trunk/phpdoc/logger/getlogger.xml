<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 283871 $ -->

<refentry xml:id="loggermanager.getlogger" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Logger::getLogger</refname>
  <refpurpose>Alias to LoggerManager::getLogger.</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <!-- Example: All methods have this -->
   <type>Logger</type><methodname>Logger::getLogger</methodname>
   <!-- Example: Required parameter -->
   <methodparam><type>string</type><parameter>name</parameter></methodparam>
  </methodsynopsis>
  <para>
		This function is an alias to LoggerManager::getLogger.
    It is keeped just as a shorthand, but calling LoggerManager::getLogger will be a little bit faster.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>name</parameter></term>
     <listitem>
      <para>
       logger name. Usually the name of
       the method (__METHOD__) is used to easily identify the messages context.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <caution>
   <para>
    Always use LoggerManager::getLogger or Logger::getLogger to create Loggers and set the proper instances state.
    Directly creating Logger class does not works as the Logger will not have acess to appenders stack.
   </para>
  </caution>
 </refsect1>
 
<!--
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
    Logger
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   When does this function issue E_* level errors, and/or throw exceptions.
  </para>
 </refsect1>
 
 <refsect1 role="unicode">
  &reftitle.unicode;
  <para>
   Information specific to unicode, from the PHP 6 changes.
  </para>
 </refsect1>
 
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>Enter the version of change here</entry>
       <entry>
        Describe the change
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
--> 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>getLogger</function> example</title>
    <para>
      Simple example of creating a new logger.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$log = Logger::getLogger(__METHOD__);
$log->debug('before foo');
$r = foo();
$log->debug('foo returned '.$r);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
176 [main] DEBUG - before foo.
177 [main] DEBUG - foo returned 1.
]]>
    </screen>
   </example>
  </para>
 </refsect1>
<!-- 
 <refsect1 role="notes">
  &reftitle.notes;
  <caution>
   <para>
    Any notes that don't fit anywhere else should go here.
    90% of the time, notes, warnings or cautions are better placed in the
    parameters section. Consider that before using this section!
   </para>
  </caution>
  &note.language-construct;
  &note.not-bin-safe;
  &note.registerglobals;
 </refsect1>
-->

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>LoggerManager::getLogger</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
